//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""81fe2ca6-f718-4556-bc61-ee20395559a5"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""03b8361c-3e6a-487e-8c62-3782e12b540c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""e9a70d85-0b98-40a8-a7e6-e38cca019a8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""d25a495a-68c3-4ee4-94f8-9f23c7c014ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""4aba330f-67e8-49ff-81c2-f689f7f21d32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bdd5f5c2-bfd7-410d-bce0-467632d1a821"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f216858d-796e-4db2-ad6b-bb62cf50d26c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55a92f87-4fbd-4471-96e2-546d6232aaba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""badfa526-f366-4053-a2a4-d80b31756546"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Spells"",
            ""id"": ""db7cf14d-9f77-4c70-a403-4e6e0a178b87"",
            ""actions"": [
                {
                    ""name"": ""SpellUp"",
                    ""type"": ""Button"",
                    ""id"": ""87a32fbb-bd3a-4746-add3-b48e9d0b61f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellDown"",
                    ""type"": ""Button"",
                    ""id"": ""43c63e12-3688-482e-bed4-c275bd6147c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellLeft"",
                    ""type"": ""Button"",
                    ""id"": ""10f8a9c3-eabe-4a91-99e6-5868c817874b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellRight"",
                    ""type"": ""Button"",
                    ""id"": ""47b503b9-2208-4826-8fc6-7356d5bdf348"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6a15d7b-7aed-41c3-938b-5698b5d3af42"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d9a31c-15eb-48f3-be2c-6aa8a3f1a3d6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00266ce2-364d-4797-85e6-1497def961ba"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b037b68-cf54-47a1-9022-20fe659bcb75"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Triggers"",
            ""id"": ""4438252b-1581-4eda-ab29-34c231b28fde"",
            ""actions"": [
                {
                    ""name"": ""SpellMode"",
                    ""type"": ""Button"",
                    ""id"": ""0d740fc8-6bee-40c8-8e06-256854a3048e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5235bd8c-1d33-483a-b6e4-02bfa7e89dd8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""SpellMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Up = m_Movement.FindAction("Up", throwIfNotFound: true);
        m_Movement_Down = m_Movement.FindAction("Down", throwIfNotFound: true);
        m_Movement_Left = m_Movement.FindAction("Left", throwIfNotFound: true);
        m_Movement_Right = m_Movement.FindAction("Right", throwIfNotFound: true);
        // Spells
        m_Spells = asset.FindActionMap("Spells", throwIfNotFound: true);
        m_Spells_SpellUp = m_Spells.FindAction("SpellUp", throwIfNotFound: true);
        m_Spells_SpellDown = m_Spells.FindAction("SpellDown", throwIfNotFound: true);
        m_Spells_SpellLeft = m_Spells.FindAction("SpellLeft", throwIfNotFound: true);
        m_Spells_SpellRight = m_Spells.FindAction("SpellRight", throwIfNotFound: true);
        // Triggers
        m_Triggers = asset.FindActionMap("Triggers", throwIfNotFound: true);
        m_Triggers_SpellMode = m_Triggers.FindAction("SpellMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Up;
    private readonly InputAction m_Movement_Down;
    private readonly InputAction m_Movement_Left;
    private readonly InputAction m_Movement_Right;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Movement_Up;
        public InputAction @Down => m_Wrapper.m_Movement_Down;
        public InputAction @Left => m_Wrapper.m_Movement_Left;
        public InputAction @Right => m_Wrapper.m_Movement_Right;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Spells
    private readonly InputActionMap m_Spells;
    private List<ISpellsActions> m_SpellsActionsCallbackInterfaces = new List<ISpellsActions>();
    private readonly InputAction m_Spells_SpellUp;
    private readonly InputAction m_Spells_SpellDown;
    private readonly InputAction m_Spells_SpellLeft;
    private readonly InputAction m_Spells_SpellRight;
    public struct SpellsActions
    {
        private @PlayerInput m_Wrapper;
        public SpellsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpellUp => m_Wrapper.m_Spells_SpellUp;
        public InputAction @SpellDown => m_Wrapper.m_Spells_SpellDown;
        public InputAction @SpellLeft => m_Wrapper.m_Spells_SpellLeft;
        public InputAction @SpellRight => m_Wrapper.m_Spells_SpellRight;
        public InputActionMap Get() { return m_Wrapper.m_Spells; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpellsActions set) { return set.Get(); }
        public void AddCallbacks(ISpellsActions instance)
        {
            if (instance == null || m_Wrapper.m_SpellsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpellsActionsCallbackInterfaces.Add(instance);
            @SpellUp.started += instance.OnSpellUp;
            @SpellUp.performed += instance.OnSpellUp;
            @SpellUp.canceled += instance.OnSpellUp;
            @SpellDown.started += instance.OnSpellDown;
            @SpellDown.performed += instance.OnSpellDown;
            @SpellDown.canceled += instance.OnSpellDown;
            @SpellLeft.started += instance.OnSpellLeft;
            @SpellLeft.performed += instance.OnSpellLeft;
            @SpellLeft.canceled += instance.OnSpellLeft;
            @SpellRight.started += instance.OnSpellRight;
            @SpellRight.performed += instance.OnSpellRight;
            @SpellRight.canceled += instance.OnSpellRight;
        }

        private void UnregisterCallbacks(ISpellsActions instance)
        {
            @SpellUp.started -= instance.OnSpellUp;
            @SpellUp.performed -= instance.OnSpellUp;
            @SpellUp.canceled -= instance.OnSpellUp;
            @SpellDown.started -= instance.OnSpellDown;
            @SpellDown.performed -= instance.OnSpellDown;
            @SpellDown.canceled -= instance.OnSpellDown;
            @SpellLeft.started -= instance.OnSpellLeft;
            @SpellLeft.performed -= instance.OnSpellLeft;
            @SpellLeft.canceled -= instance.OnSpellLeft;
            @SpellRight.started -= instance.OnSpellRight;
            @SpellRight.performed -= instance.OnSpellRight;
            @SpellRight.canceled -= instance.OnSpellRight;
        }

        public void RemoveCallbacks(ISpellsActions instance)
        {
            if (m_Wrapper.m_SpellsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpellsActions instance)
        {
            foreach (var item in m_Wrapper.m_SpellsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpellsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpellsActions @Spells => new SpellsActions(this);

    // Triggers
    private readonly InputActionMap m_Triggers;
    private List<ITriggersActions> m_TriggersActionsCallbackInterfaces = new List<ITriggersActions>();
    private readonly InputAction m_Triggers_SpellMode;
    public struct TriggersActions
    {
        private @PlayerInput m_Wrapper;
        public TriggersActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpellMode => m_Wrapper.m_Triggers_SpellMode;
        public InputActionMap Get() { return m_Wrapper.m_Triggers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggersActions set) { return set.Get(); }
        public void AddCallbacks(ITriggersActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggersActionsCallbackInterfaces.Add(instance);
            @SpellMode.started += instance.OnSpellMode;
            @SpellMode.performed += instance.OnSpellMode;
            @SpellMode.canceled += instance.OnSpellMode;
        }

        private void UnregisterCallbacks(ITriggersActions instance)
        {
            @SpellMode.started -= instance.OnSpellMode;
            @SpellMode.performed -= instance.OnSpellMode;
            @SpellMode.canceled -= instance.OnSpellMode;
        }

        public void RemoveCallbacks(ITriggersActions instance)
        {
            if (m_Wrapper.m_TriggersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggersActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggersActions @Triggers => new TriggersActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface ISpellsActions
    {
        void OnSpellUp(InputAction.CallbackContext context);
        void OnSpellDown(InputAction.CallbackContext context);
        void OnSpellLeft(InputAction.CallbackContext context);
        void OnSpellRight(InputAction.CallbackContext context);
    }
    public interface ITriggersActions
    {
        void OnSpellMode(InputAction.CallbackContext context);
    }
}
